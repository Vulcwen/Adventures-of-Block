The MIT License (MIT)

Copyright (c) 2018 Twan Veldhuis, Ivar Troost

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=========================================================

SMT Level Definition Script (.lds)

A level definition script consists of settings and a series of commands.

Syntax definition:
<line> := <command> | <setting> | //<comment>
<command> := var <name> = <func-call> | <func-call>
<func-call> := <func-name> <subject-type>? <argument>*
<setting> := $<name> = <value>

Settings:
Settings are processed at the start of the level, and will set variables in the general game state.

Supported settings:
$health = <integer>
$score = <integer>

Commands:
Commands are executed line by line (top-down) while the level runs, the minimal delay between commands is a single frame.
In a command you can execute a function, and optionally allow the function to assign a variable.
C# equivalents:
LDS: var a = spawn bomb 0 0
C#: { object a_ = spawnBomb(0,0); variables["a"] = a_; types["a"] = ObjectType.bomb; }
Variables are therefore names, types are tracked in run-time for checking compatibility when reading.
You may assign a different value of a different type to the same variable name at a later time.

Not all functions will set a variable:
var a = wait 4
will just perform
wait 4
and not store anything in a, it will not even clear it's previous value if it had one.

Supported commands:
wait <ticks:integer> //wait for the specified amount of ticks
spawn <subjecttype> <argument>* //spawn an object, using additionally provided arguments (amount and expected types depend on the subject type)
despawn <subject_instance>      //despawn an instance of an object, this means you'll need to have assigned a previously spawned object to a variable.
choose <argument>* //choose one of the provided arguments with equal probability (only meaningful when assigned to a variable)
array <subject-type> <argument>* //create an array of subject-type with the arguments as elements (only meaningful when assigned to a variable)
select <index:integer> <array>   //perform index-wise access to an array (LDS: select 0 a C#: a[0])
